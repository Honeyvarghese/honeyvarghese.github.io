{"name":"Automated Modelling of Self-Organization  in Artiﬁcial Tissue Simulators using Genetic Algorithm.","tagline":"Honey Varghese, Intelligent Systems Project","body":"Abstract— Simulating multi-cellular systems that models the self organization of initial random distribution of cells to regular cellular networks can be very useful in the ﬁeld of bio-engineering and medical applications. These models incorporate a set of parameters that represent the physical and chemical properties of the biological system.These parameters are used to deﬁne the components of the models that when simulated reproduce the behavior of the biological system. Genetic Algorithm can be used to search for those parameters that contribute to the self organization capability of the system. Set Complexity Algorithm is used for the measuring the regularity of the resulting cellular pattern to determine the ﬁtness of the parameters set derived by the Genetic Algorithm. \r\n\r\n##Aim of the Project:\r\n\r\nSimulation of small set of biologically plausible cell behaviors that can reproduce the initial self-organization of endothelial cells (the cells lining the inner walls of blood vessels).\r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11707192/34fdde78-9ebe-11e5-8f8e-050b50b95320.PNG)\r\n\r\n##How is it useful?\r\n\r\nA better understanding of the mechanisms by which endothelial cells organize into blood vessels is crucial if we need to enhance or suppress blood vessel growth under pathological conditions, including diabetes, wound healing, and tumor growth. \r\n\r\n##Story behind self-organization..\r\n\r\nSelf-organization is a process where some form of overall order or coordination arises out of the local interactions between smaller component parts of an initially disordered system.\r\n\r\nIf we look around we can see self organization in physical, chemical,biological and cognitive systems.\r\nSelf-organization of fish in the ocean(picture below) is a very good example.\r\n![](https://cloud.githubusercontent.com/assets/15885993/11676541/6ea3eab0-9df0-11e5-971b-0b7eb98823bb.jpg)\r\n\r\nAnd there is a certain type of energy flow that has self-organized into life.  Each cell within our bodies is a self-organized mass of swirling energy that maintains itself using a natural form of intelligence known as animate intelligence.  And each one of those billions of cells connects with others, to form organs, blood flow, a nervous system, and all the other miraculous complexities that coalesce to make you and me into the mind/body organism known as a human being.\r\n\r\n##Project Procedure and Implementation\r\n\r\nA search engine based on genetic algorithm is used to derive the value of cell properties(parameters) that will result in the self-organization of cells when simulated.\r\n\r\nThe picture shown below describes the how the search engine works.\r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11704526/ba526f1c-9ea5-11e5-9c83-e42b5de1d85c.png)\r\n\r\n##Implementation details of the engine:\r\n\r\n##Simulator: IDynomics\r\n\r\nThe iDynoMiCS software simulates the growth of microbial communities. iDynoMiCS is written in Java, and uses XML protocol files that allow one to specify easily many different types of simulations. iDynoMiCS writes plain-text XML files as output, and these may be processed using any number of software tools (though we provide some general post-processing routines that run in Matlab and R). In addition to XML files, iDynoMiCS also writes files for POV-Ray, which is used to render 3-D images of the simulation.\r\n\r\n###XML Files:\r\n\r\nThese are protocol files that define the cell properties(parameters). iDynomics take this protocol files as input and simulate cells that have the property described in the property file.\r\n\r\n##Pov-ray Files and converter\r\n\r\niDynomics output files of the type POV-Ray. Java code can be used to execute these files in POV-ray software and it will produce the png Images. These images describes the growth pattern of the cells at timed interval.\r\n\r\n##Image processing:\r\n\r\nIn order to analyze the regularity of the images we need to clean and make the image smooth.Cleaning is done by removing the light source and reflection while simulating(by changing the header files before POV Ray execution). Smoothing is done by process of dilating and eroding technique. The Image below demonstrates the change in image. \r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11708367/dfc11df4-9ecb-11e5-832d-d27257fd0050.PNG)\r\n\r\n##Set Complexity algorithm\r\n\r\nSet Complexity  algorithm is used in this project to measure the regularity of the final cellular patterns generated by the simulator.\r\n \r\nDefinition and Calculation:\r\n\r\nSet complexity can be used to measure the information content of a regulatory network, its temporal dynamics, and the spatial pattern produced. By measuring information content, set complexity can distinguish between critical systems that encode maximal information, and ordered and chaotic systems that encode less information. Set complexity (symbolized as Ψ) applies Kolmogorov's intrinsic complexity  to quantify contextual information in a set of objects by discounting pairs of objects that are randomly related or redundant. Set complexity is independent of any specific application, so long as each object in the set can be encoded as a string.\r\n\r\nThe Kolmogorov complexity of two strings is the length of the shortest algorithm that can transform one string to the other. Exact computation is undecidable, but minimum algorithm length can be approximated by the normalized compression distance (NCD). NCD is defined below, where si and sj are strings, si + sj is the concatenation of si and sj, and C(s) is the compression size of string s:\r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11728628/21b23bcc-9f48-11e5-9205-55adfc0be8df.PNG)\r\n\r\nNCD is a measure of the similarity of the two strings. If the two strings compress smaller together than separately, then NCD will be closer to 0.0. Consider the following cases, where sr is from the set of random strings and ss are simple strings containing regular patterns:\r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11728633/297c2cb4-9f48-11e5-9ca1-07b758a4a8a2.PNG)\r\n\r\nThen set complexity of a set of n strings S = {s1, …, sn} is defined:\r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11728631/25bfa0c4-9f48-11e5-90e5-3c24560c0be2.PNG)\r\n\r\nwhere dij = NCD(si, sj). The distance dij is maximized when NCD(si, sj) = 0.5, which occurs when C(si + sj) ≃ C(si)/2 − C(sj), assuming C(si) > C(sj). In the case of strings in the set being similar, Ψ(S) ≃ 0 indicating the set belongs to the ordered domain and contains little information. Chaotic systems generate strings that appear random and so Ψ(S) is minimized, but not zero because of the C(si) multiplicative term. In the various papers it is shown that Ψ(S) is maximized when the set of strings describe an information dense critical system.\r\n\r\nNote: Computing set-complexity involves applying loss-less compression on the input objects, which are encoded as strings. When the objects are images, encoding them as strings is computationally intensive and potentially unnecessary. So in this project a method of computing the set-complexity of a set of images by using image compression directly thereby avoiding the slow conversion to strings is used. In addition to that for better compression, the image processing technique described in the previous section is also used.\r\n\r\n#Set Complexity analysis:\r\n\r\nThe graph below shows the analysis of the set complexity values over a sample image set that slowly reaches to regular pattern from the initial random  state.The set complexity is calculated by considering a moving window of 4 images over the image series generated by the simulator.\r\n\r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11709510/6d4459c6-9ed5-11e5-89ff-c90274cf3fc7.PNG)\r\n![](https://cloud.githubusercontent.com/assets/15885993/11709537/ad4aeb70-9ed5-11e5-96ae-07b32f30f9fa.PNG)\r\n![](https://cloud.githubusercontent.com/assets/15885993/11709549/c1a2455a-9ed5-11e5-8654-0b9941ecf5b3.PNG)\r\n![](https://cloud.githubusercontent.com/assets/15885993/11709561/d6823610-9ed5-11e5-97a2-5b6f1a7d3d90.PNG)\r\n\r\nObservation: The initial portion of the graph(1-7) which represents the increase in set complexity as the regularity of the image increase. In other words, completely random series the set complexity is low.\r\n\r\nThe observation is quite useful in selecting Set Complexity as the fitness function that describes the regularity of the image.\r\n\r\n##Genetic Algorithm:\r\n\r\nGenetic Algorithm is used as the search engine to find the parameter values that help in self organization. Genetic Algorithms uses the evolution theory to evolve the fittest chromosomes. Here we express the parameter values of the system as genes. \r\n\r\nGene 1: Represents muMax (which is the maximum specific rate at which the reaction may occur, in units of 1/ hour . This parameter will multiply each factor that follows in order to yield a net reaction rate)values\r\n\r\nGene 2:Chemotatic Stength\r\nThe fittest chromosome is the one with genes representing the parameter values that give the best result.Thus the simulation of system with those parameters will result in the self organisation of the cells.\r\n\r\nHere the interesting part is the analysis of the result to determine the best chromosome. In other words we need to determine weather the random cells are self organized. Idea here is to find the Set Complexity of the images produced by the simulation of cells using those parameter values. The better organised cell patterns will have better Set Complexity.\r\n\r\n\r\nResults:\r\n\r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11825714/e69dd79a-a33d-11e5-9c4d-35cc91cc3140.png)\r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11821146/622ac18e-a325-11e5-9811-3fc682c66b37.PNG)\r\n\r\n\r\nInit 1500\r\nunprocessed\r\n![](https://cloud.githubusercontent.com/assets/15885993/11825187/d74f3426-a33a-11e5-9282-db8e316e2ef7.PNG)\r\nprocessed\r\n![](https://cloud.githubusercontent.com/assets/15885993/11825188/d8ecc44c-a33a-11e5-9188-7b13d8464d18.PNG)\r\n\r\nheatmap\r\n\r\n![](https://cloud.githubusercontent.com/assets/15885993/11825197/e070d320-a33a-11e5-8643-3829c3c3f107.png)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}